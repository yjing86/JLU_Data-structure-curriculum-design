
void clean(int a[30][30],const int q,const int p,const int n,const int m,const int k){
    for(int i=q;i<p;i++){
        for(int j=n;j<m;j++){
            a[i][j]=k;
        }
    }
}
void dig(int GamePanel[30][30], int i, int j, int n, int m, int mine[30][30]) {
    GamePanel[i][j] = 0;
    for (int q = i - 1; q <= i + 1; q++) {
        if (q >= 0 && q < n) {
            for (int p = j - 1; p <= j + 1; p++)
                if (0<=p && p < m && GamePanel[q][p] == -1){
                    if (mine[q][p] != 0)
                        GamePanel[q][p] = mine[q][p];
                    else
                        dig(GamePanel, q, p, n, m, mine);
                }
        }
    }
}
int panduan(int a[30][30],int b[30][30],int n,int m){
    for(int i=0;i<n;i++){
        for(int j=0;j<m;j++){
            if(a[i][j]==-1&&b[i][j]!=-1){
                return -1;
            }
        }
    }
    return 0;
}
int calculate(int a[30][30], int i, int j, int k) {
    int count = 0;
    if (a[i - 1][j - 1] == k)
        count++;
    if (a[i - 1][j] == k)
        count++;
    if (a[i - 1][j + 1] == k)
        count++;
    if (a[i][j - 1] == k)
        count++;
    if (a[i][j + 1] == k)
        count++;
    if (a[i + 1][j - 1] == k)
        count++;
    if (a[i + 1][j] == k)
        count++;
    if (a[i + 1][j + 1] == k)
        count++;
    return count;
}
int open(int gamepanel[30][30], int mine_all[30][30], int mark[30][30], int n, int m, int i, int j) {
    int count=mine_all[i][j]+1;
    int panduan=(mark[i - 1][j - 1] == 0 && gamepanel[i - 1][j - 1] == -1 );
    if (panduan&& mine_all[i - 1][j - 1] != -1) {
        mark[i - 1][j - 1] = 1;
        count += open(gamepanel, mine_all, mark, n, m, i - 1, j - 1);
    }
    panduan=(mark[i - 1][j] == 0 && gamepanel[i - 1][j] == -1) ;
    if (panduan&& mine_all[i - 1][j] != -1) {
        mark[i - 1][j] = 1;
        count += open(gamepanel, mine_all, mark, n, m, i - 1, j);
    }
    panduan=(mark[i - 1][j + 1] == 0 && gamepanel[i - 1][j + 1] == -1 );
    if (panduan&& mine_all[i - 1][j + 1] != -1) {
        mark[i - 1][j + 1] = 1;
        count += open(gamepanel, mine_all, mark, n, m, i - 1, j + 1);
    }
    panduan=(mark[i][j - 1] == 0 && gamepanel[i][j - 1] == -1 );
    if (panduan&& mine_all[i][j - 1] != -1) {
        mark[i][j - 1] = 1;
        count += open(gamepanel, mine_all, mark, n, m, i, j - 1);
    }
    panduan=(mark[i][j + 1] == 0 && gamepanel[i][j + 1] == -1 );
    if (panduan&& mine_all[i][j + 1] != -1) {
        mark[i][j + 1] = 1;
        count += open(gamepanel, mine_all, mark, n, m, i, j + 1);
    }
    panduan=(mark[i + 1][j - 1] == 0 && gamepanel[i + 1][j - 1] == -1);
    if (panduan&& mine_all[i + 1][j - 1] != -1) {
        mark[i + 1][j - 1] = 1;
        count += open(gamepanel, mine_all, mark, n, m, i + 1, j - 1);
    }
    panduan=(mark[i + 1][j] == 0 && gamepanel[i + 1][j] == -1);
    if (panduan && mine_all[i + 1][j] != -1) {
        mark[i + 1][j] = 1;
        count += open(gamepanel, mine_all, mark, n, m, i + 1, j);
    }
    panduan=(mark[i + 1][j + 1] == 0 && gamepanel[i + 1][j + 1] == -1 );
    if (panduan&& mine_all[i + 1][j + 1] != -1) {
        mark[i + 1][j + 1] = 1;
        count += open(gamepanel, mine_all, mark, n, m, i + 1, j + 1);
    }
    return count;
}
int next(int gamepanel[30][30],int mine_all[30][30],int mark[30][30],int n,int m,int &x,int &y,int a,int b){
    int number=0;
    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= m; j++) {
            clean(mark, 0, 30, 0, 20, 0);
            if ((mine_all[i][j] == a||mine_all[i][j]==b) && gamepanel[i][j] == -1) {
                int t = open(gamepanel, mine_all, mark, n, m, i, j);
                if (t > number) {
                    number = t;
                    x = i;
                    y = j;
                }}}}
    x--;
    y--;
    return number;
}
void machine(int GamePanel[30][30], int n, int m, int& x, int& y){
    int gamepanel[30][30]={0};
    int mine_all[30][30]={0};
    clean(mine_all, 0, 30, 0, 30, 0);
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            gamepanel[i+1][j+1] = GamePanel[i][j];
            if (gamepanel[i+1][j+1] != -1)
                mine_all[i+1][j+1] = 1;
        }
    }
    int opennumber = 0;
    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= m; j++) {
            if (gamepanel[i][j] != -1)
                opennumber++;
        }
    }
    if (opennumber == 0) {
        x = n - 1;
        y = m - 1;
        return;
        //first
    }
    int temp=0;
    do{
        temp=0;
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= m; j++) {
                if (gamepanel[i][j] != -1) {
                    if (calculate(gamepanel, i, j, -1) == gamepanel[i][j]||(calculate(mine_all, i, j, 1) + gamepanel[i][j]) == 8){
                        // all mine
                        if (gamepanel[i - 1][j - 1] == -1 && mine_all[i - 1][j - 1] == 0) {
                            mine_all[i - 1][j - 1] = -1;
                            temp++;
                        }
                        if (gamepanel[i - 1][j] == -1 && mine_all[i - 1][j] == 0) {
                            mine_all[i - 1][j] = -1;
                            temp++;
                        }
                        if (gamepanel[i - 1][j + 1] == -1 && mine_all[i - 1][j + 1] == 0) {
                            mine_all[i - 1][j + 1] = -1;
                            temp++;
                        }
                        if (gamepanel[i][j - 1] == -1 && mine_all[i][j - 1] == 0) {
                            mine_all[i][j - 1] = -1;
                            temp++;
                        }
                        if (gamepanel[i][j + 1] == -1 && mine_all[i][j + 1] == 0) {
                            temp++;
                            mine_all[i][j + 1] = -1;
                        }
                        if (gamepanel[i + 1][j - 1] == -1 && mine_all[i + 1][j - 1] == 0) {
                            mine_all[i + 1][j - 1] = -1;
                            temp++;
                        }
                        if (gamepanel[i + 1][j] == -1 && mine_all[i + 1][j] == 0) {
                            mine_all[i + 1][j] = -1;
                            temp++;
                        }
                        if (gamepanel[i + 1][j + 1] == -1 && mine_all[i + 1][j + 1] == 0) {
                            mine_all[i + 1][j + 1] = -1;
                            temp++;
                        }}}}}
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= m; j++) {
                if (gamepanel[i][j] != -1) {
                    if (calculate(mine_all, i, j, -1) == gamepanel[i][j] ){
                        //all fine
                        if (mine_all[i - 1][j - 1] == 0) {
                            temp++;
                            mine_all[i - 1][j - 1] = 1;
                        }
                        if (mine_all[i - 1][j] == 0) {
                            mine_all[i - 1][j] = 1;
                            temp++;
                        }
                        if (mine_all[i - 1][j + 1] == 0) {
                            mine_all[i - 1][j + 1] = 1;
                            temp++;
                        }
                        if (mine_all[i][j - 1] == 0) {
                            mine_all[i][j - 1] = 1;
                            temp++;
                        }
                        if (mine_all[i][j + 1] == 0) {
                            mine_all[i][j + 1] = 1;
                            temp++;
                        }
                        if (mine_all[i + 1][j - 1] == 0) {
                            temp++;
                            mine_all[i + 1][j - 1] = 1;
                        }
                        if (mine_all[i + 1][j] == 0) {
                            mine_all[i + 1][j] = 1;
                            temp++;
                        }
                        if (mine_all[i + 1][j + 1] == 0) {
                            mine_all[i + 1][j + 1] = 1;
                            temp++;
                        }}}}}}
    while (temp != 0 );
    int mark[30][30];
    if(next(gamepanel,mine_all,mark,n,m,x,y,1,1)!=0)
        return;
    if(next(gamepanel,mine_all,mark,n,m,x,y,1,0)!=0)
        return;
    clean(mark, 0, 30, 0, 30, 0);
    for(int i=1;i<=n;i++){
        for(int j=1;j<=m;j++){
            if(gamepanel[i][j]==-1&&mine_all[i][j]!=-1){
                x --;
                y --;
                return;
            }
        }
    }
}
